@startuml
'https://plantuml.com/class-diagram


class Day14Model {
+ {static} fromRockSet(rocks, part, solution method)


}

Day14Model --* SolutionMethod

interface SolutionMethod {
+ {static} SPAWN_POINT
+ moveSandPiece(p)
+{abstract} executeOneTimeStep()
+{abstract} setCurrentSandPiece(p)
+ getNumSandPiecesFallenSoFar()

}

DataReader --> Day14DataModel
DataWriter --> Day14DataModel


SolutionMethod ..|> NaiveSolutionMethod
class NaiveSolutionMethod {
+ executeOneTimeStep()
}

Day14ModelView *- SolutionMethod

class Day14ModelView {
+ setToFalling(p));
+ setToAtRest(p);
+ noteUpdate(p);
+ getIsRock(p);
+ getIsAtRest(p);
+ getIsFloor(p);
+ setToOpen(p);
+ setCurrentSandPiece(p);
}

Day14Model --* Day14ModelView

IDay14Controller *-- Day14ModelView
Day14ModelView --* DataWriter

interface DataReader {
+ {abstract} getStateOfPoint(p);
+ {abstract} getIsFloor(p);
+ {abstract} getIsAtRest(p);
+ {abstract} getCurrentSandPiece();
+ {abstract} getNumPiecesAtRest();
+ getIsRock(p);
+ {abstract}getLowestRockY();
}

interface DataWriter {
+ {abstract} setCurrentSandPiece(p);
+ {abstract} setToFalling(p);
+ {abstract} setToAtRest(p);

}
interface Day14DataModel {}



interface PartConstraint {
+ {abstract} floorY();
+ {abstract} allowsSand(p);
+ {abstract} endCondition();
}

PartConstraint ..> PartConstraint2
PartConstraint ..> PartConstraint1

class PartConstraint1 {
    +floorY();
    +allowsSand(p);
    +endCondition();
}
class PartConstraint2 {
+ floorY();
+ allowsSand(p);
+ endCondition();
}
SolutionMethod -* PartConstraint
PartConstraint1 --* DataReader
PartConstraint2 --* DataReader

IDay14Controller --> Day14ModelView : "creates"
IDay14Controller -> Day14Model: "creates"
Day14Model -* DataReader
Day14Model --* PartConstraint
@enduml