@startuml
'https://plantuml.com/class-diagram


class Day14Model {
+ {static} fromRockSet(rocks, part, solution method)


}

Day14Model --* SolutionMethod

interface SolutionMethod {
+ moveSandPiece(p)
+{abstract} executeOneTimeStep()
+{abstract} setCurrentSandPiece(p)
+ getNumSandPiecesFallenSoFar()
+{abstract} setPieceToRest(p)
}



SolutionMethod ..|> NaiveSolutionMethod
class NaiveSolutionMethod {
+ {static} SPAWN_POINT
+ currentSandPiece
+ NumSandPiecesFallenSoFar
+ setPieceToRest(p);
- moveCurrentSandPiece();
# createNewSandPiece()
+ executeOneTimeStep()
}

SolutionMethod -* Day14ModelView

class Day14ModelView {
+ setToFalling(p));
+ setToAtRest(p);
+ noteUpdate(p);
+ getIsRock(p);
+ getIsAtRest(p);
+ getIsFloor(p);
+ setToOpen(p);
+ setCurrentSandPiece(p);
}

Day14Model --* Day14DataModel

IDay14Controller *-- Day14ModelView
Day14ModelView -* Day14DataModel
interface Day14DataModel {
+ <<get/set>> currentSandPiece;
+ {abstract} getStateOfPoint(p);
+ {abstract} getIsFloor(p);
+ {abstract} getIsAtRest(p);
+ {abstract} setToFalling(p);
+ {abstract} setToAtRest(p);
+ {abstract} getNumPiecesAtRest();
+ getIsRock(p);
+ {abstract}getLowestRockY();
}



interface PartConstraint {
+ {abstract} floorY();
+ {abstract} allowsSand(p);
+ {abstract} endCondition();
}

PartConstraint ..> PartConstraint2
PartConstraint ..> PartConstraint1

class PartConstraint1 {
    +floorY();
    +allowsSand(p);
    +endCondition();
}
class PartConstraint2 {
+ floorY();
+ allowsSand(p);
+ endCondition();
}
SolutionMethod -* PartConstraint
PartConstraint1 --* Day14DataModel
PartConstraint2 --* Day14DataModel

IDay14Controller --> Day14ModelView : "creates"
Day14Model <- IDay14Controller: "creates"
@enduml